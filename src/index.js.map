{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,0CAA0C;AAC1C,mCAAmC;AACnC,6BAA6B;AAC7B,6DAAkD;AAClD,qCAAgC;AAChC,yCAAqC;AACrC,kEAA4D;AAC5D,uCAAsC;AAGtC,MAAM,GAAG,GAAG,OAAO,EAAE,CAAA;AACrB,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAA;AACrC,MAAM,EAAE,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE;IACvC,WAAW,EAAE,KAAK;IAClB,QAAQ,EAAE,IAAI,CAAC,mDAAmD;CAClE,CAAC,CAAA;AAEF,iCAAc,CAAC,kCAAY,CAAC,QAAQ,CAAC,CAAA;AAErC,EAAE,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,MAAW,EAAE,EAAE;IACnC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAA;IACpC,oBAAU,CAAC,MAAM,CAAC,CAAA;AACnB,CAAC,CAAC,CAAA;AAEF,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAA;AAC1B,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;AAClD,GAAG,CAAC,GAAG,CAAC,eAAM,CAAC,gBAAM,EAAE,CAAC,CAAC,CAAA;AAEzB,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACxB,OAAO,CAAC,GAAG,CAAC,CAAC,oDAAoD,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAA;IACzF,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAA;AACzC,CAAC,CAAC,CAAA;AAEW,QAAA,QAAQ,GAAG,GAAG,EAAE;IAC5B,OAAO,EAAE,CAAA;AACV,CAAC,CAAA","sourcesContent":["import bodyParser = require('body-parser')\nimport express = require('express')\nimport http = require('http')\nimport { NetworkTypes } from 'blockstart-nem1-sdk'\nimport { Router } from 'express'\nimport { routes } from './api/routes'\nimport { initNEMLibrary } from './services/network-services'\nimport { socketInit } from './sockets'\n\n\nconst app = express()\nconst server = http.createServer(app)\nconst io = require('socket.io')(server, {\n\tserveClient: false,\n\twsEngine: 'ws' // uws is not supported since it is a native module\n})\n\ninitNEMLibrary(NetworkTypes.MAIN_NET)\n\nio.on('connection', (client: any) => {\n\tconsole.log('new socket connection')\n\tsocketInit(client)\n})\n\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true }))\napp.use(routes(Router()))\n\nserver.listen(3000, () => {\n\tconsole.log(('  App is running at http://localhost:%d in %s mode'), 3000, app.get('env'))\n\tconsole.log('   Press CTRL-C to stop\\n')\n})\n\nexport const ioSocket = () => {\n\treturn io\n}\n"]}