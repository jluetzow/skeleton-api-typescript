{"version":3,"file":"transaction.js","sourceRoot":"","sources":["transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import { BPlainMessage } from 'blockstart-nem1-sdk'\nimport { Router } from 'express'\nimport {\n\tKEY_ADDRESS, KEY_MESSAGE_PAYLOAD,\n\tKEY_MOSAIC, KEY_MOSAIC_ID, KEY_NEXT_PAGE_ID, KEY_PASSWORD, KEY_TRANSFER_TRANSACTION,\n\tKEY_TX_MESSAGE, KEY_WALLET,\n\tvCreateTransferTransaction, vFilterTransaction,\n\tvSignTransferTransaction\n} from '../middleware/validators'\nimport { MAddress } from '../models/address'\nimport { TransactionJSON } from '../models/transaction'\nimport { createTransferTransaction, findTransactions, sendTransferTransaction } from '../models/transfer-transaction'\nimport { decrypt } from '../utilities/crypto-util'\n\nexport const transaction = () => {\n\tconst api: Router = Router()\n\n\tapi.get('/all/:address', async (req: any, res: any) => {\n\t\ttry {\n\t\t\tconst address = new MAddress(req.params.address)\n\t\t\tconst txs: TransactionJSON = await address.transactions(req.query.nextpageid)\n\t\t\tres.send(txs)\n\t\t} catch (err) {\n\t\t\tres.status(409).json({ message: err.message })\n\t\t}\n\t})\n\n\tapi.post('/decode/message', (req: any, res: any) => {\n\t\ttry {\n\t\t\tconst message = {\n\t\t\t\tpayload: req.body[KEY_MESSAGE_PAYLOAD]\n\t\t\t}\n\t\t\tres.send({payload: BPlainMessage.castToPlainMessage(message).plain()})\n\t\t} catch (err) {\n\t\t\tres.status(409).json({ message: err.message })\n\t\t}\n\t})\n\n\tapi.post('/create', vCreateTransferTransaction, async (req: any, res: any) => {\n\t\ttry {\n\t\t\tres.send(createTransferTransaction(req.body[KEY_ADDRESS], req.body[KEY_MOSAIC], req.body[KEY_TX_MESSAGE]))\n\t\t} catch (err) {\n\t\t\tres.status(409).json({ message: err.message })\n\t\t}\n\t})\n\n\tapi.post('/send', vSignTransferTransaction, async (req: any, res: any) => {\n\t\ttry {\n\t\t\tres.send(sendTransferTransaction(req.body[KEY_WALLET], req.body[KEY_TRANSFER_TRANSACTION], decrypt(req.body[KEY_PASSWORD])))\n\t\t} catch (err) {\n\t\t\tres.status(409).json({ message: err.message })\n\t\t}\n\t})\n\n\tapi.post('/filtered/byMosaicId', vFilterTransaction, async (req: any, res: any) => {\n\t\ttry {\n\t\t\tres.send(await findTransactions(req.body[KEY_ADDRESS], req.body[KEY_MOSAIC_ID], req.body[KEY_NEXT_PAGE_ID]))\n\t\t} catch (err) {\n\t\t\tres.status(409).json({ message: err.message })\n\t\t}\n\t})\n\n\treturn api\n}\n"]}